#- name: GET ACME Accounts
#  uri:
#    url: https://{{ primary_node }}:8006/api2/json/cluster/acme/account
#    method: GET
#    headers:
#      CSRFPreventionToken: "{{ proxmox_csrf }}"
#      Cookie: "PVEAuthCookie={{ proxmox_ticket }}"
#    validate_certs: no
#  register: acme_accounts
#  delegate_to: localhost
#  run_once: yes
#
#- name: Create ACME Account
#  uri:
#    url: https://{{ primary_node }}:8006/api2/json/cluster/acme/account
#    method: POST
#    headers:
#      CSRFPreventionToken: "{{ proxmox_csrf }}"
#      Cookie: "PVEAuthCookie={{ proxmox_ticket }}"
#      Content-Type: "application/json"
#    validate_certs: no
#    body: >
#      {
#        "contact": "{{ cloudflare_email }}",
#        "name": "Cloudflare-dns",
#        "tos_url": "https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf",
#      }
#    body_format: json
#  delegate_to: localhost
#  run_once: yes
#  when: acme_accounts.json.data | selectattr('name', 'equalto', 'Cloudflare-dns' ) | list | length == 0
#
#- name: List DNS Challenges
#  uri:
#    url: https://{{ primary_node }}:8006/api2/json/cluster/acme/plugins
#    method: GET
#    headers:
#      CSRFPreventionToken: "{{ proxmox_csrf }}"
#      Cookie: "PVEAuthCookie={{ proxmox_ticket }}"
#    validate_certs: no
#  register: dns_challenges
#  delegate_to: localhost
#  run_once: yes
#
#- name: Create JSON data
#  set_fact:
#    dns_data: "CF_Email={{ cloudflare_email }}\nCF_Token={{ cloudflare_api_key }}\n"
#  delegate_to: localhost
#  run_once: yes
#
#- name: Encode JSON data in base64
#  set_fact:
#    encoded_dns_data: "{{ dns_data | b64encode }}"
#  delegate_to: localhost
#  run_once: yes
#
#- name: Create DNS Challenge
#  uri:
#    url: https://{{ primary_node }}:8006/api2/json/cluster/acme/plugins
#    method: POST
#    headers:
#      CSRFPreventionToken: "{{ proxmox_csrf }}"
#      Cookie: "PVEAuthCookie={{ proxmox_ticket }}"
#      Content-Type: "application/json"
#    validate_certs: no
#    body:
#      id: "Cloudflare"
#      type: "dns"
#      api: "cf"
#      data: "{{ encoded_dns_data }}"
#    body_format: json
#  delegate_to: localhost
#  run_once: yes
#  when: dns_challenges.json.data | selectattr('api', 'defined') | selectattr('api', 'equalto', 'cf') | list | length == 0

- name: GET node cert config
  uri:
    url: https://{{ primary_node }}:8006/api2/json/nodes/{{ inventory_hostname }}/config
    method: GET
    headers:
      CSRFPreventionToken: "{{ proxmox_csrf }}"
      Cookie: "PVEAuthCookie={{ proxmox_ticket }}"
    validate_certs: no
  register: node_cert_config
  delegate_to: localhost

- name: Print node cert config
  debug:
    var: node_cert_config
  delegate_to: localhost

- name: Register certificate domain
  uri:
    url: https://{{ primary_node }}:8006/api2/json/nodes/{{ inventory_hostname }}/config
    method: PUT
    headers:
      CSRFPreventionToken: "{{ proxmox_csrf }}"
      Cookie: "PVEAuthCookie={{ proxmox_ticket }}"
      Content-Type: "application/json"
    validate_certs: no
    body:
      node: "{{ inventory_hostname }}"
      acme: "account=Cloudflare-dns"
      acmedomain0: "{{ inventory_hostname }}.{{ ansible_domain }},plugin=Cloudflare"
    body_format: json
  when: node_cert_config.json.data is not defined or
      (node_cert_config.json.data.acme is not defined or
       node_cert_config.json.data.acme | selectattr('acme', 'equalto', 'account=Cloudflare-dns') | list | length == 0)
  delegate_to: localhost

- name: Order a cert from Let's Encrypt
  uri:
    url: https://{{ primary_node }}:8006/api2/json/nodes/{{ inventory_hostname }}/certificates/acme/certificate
    method: POST
    headers:
      CSRFPreventionToken: "{{ proxmox_csrf }}"
      Cookie: "PVEAuthCookie={{ proxmox_ticket }}"
      Content-Type: "application/json"
    validate_certs: no
    body: >
      {
        "node": "{{ inventory_hostname }}"
      }
  delegate_to: localhost


#- name: GET certificate info
#  uri:
#    url: https://{{ primary_node }}:8006/api2/json/nodes/{{ inventory_hostname }}/certificates/info
#    method: GET
#    headers:
#      CSRFPreventionToken: "{{ proxmox_csrf }}"
#      Cookie: "PVEAuthCookie={{ proxmox_ticket }}"
#    validate_certs: no
#  register: certificate_info
#  delegate_to: localhost
#
#- name: Print certificate info
#  debug:
#    var: certificate_info
#  delegate_to: localhost